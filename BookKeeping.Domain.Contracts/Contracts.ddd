// main namespace for commands and messages
namespace BookKeeping.Domain.Contracts
// define data contract namespace for all classes
extern "BookKeeping"

// define shortcut for interface IIdentity
if ! = IIdentity

// define alias
const name = string name
const dateUtc = DateTime dateUtc

// Define application service IUniverseApplicationService
interface Product(ProductId Id)
{
    // define shortcut for commands
    if ? = ICommand<ProductId>
    // define shortcut for events
    if ! = IEvent<ProductId>

    CreateProduct?(string title, string itemNo, CurrencyAmount price, decimal stock, string unitOfMeasure, VatRate vatRate, Barcode barcode)
        explicit "Create product - {title}, {itemNo}, {price}, {stock}, {unitOfMeasure}, {vatRate}, {barcode}"
        ProductCreated!(string title, string itemNo, CurrencyAmount price, decimal stock, string unitOfMeasure, VatRate vatRate, Barcode barcode, UserId userId, DateTime utc)
            explicit "Product {itemNo} created, {title}, {price}, {stock}, {unitOfMeasure}, {vatRate}, {barcode} by {userId} on {utc}"

    ChangeProductBarcode?(Barcode newBarcode)
        explicit "Change product barcode - {newBarcode}"
        ProductBarcodeChanged!(Barcode newBarcode,UserId userId, DateTime utc)
            explicit "Product barcode changed on {newBarcode} by {userId} on {utc}"

    ChangeProductItemNo?(string newItemNo)
        explicit "Change product item no. - {newItemNo}"
        ProductItemNoChanged!(string newItemNo, UserId userId, DateTime utc)
            explicit "{id} item changed on {newItemNo} by {userId} on {utc}"

    MakeProductOrderable?()
        explicit "Make {id} orderable"
        ProductMakedOrderable!(UserId userId, DateTime utc)
            explicit "{id} maked orderable by {userId} on {utc}"

    MakeProductNonOrderable?(string reason)
        explicit "Make {id} non-orderable, reason - {reason}"
        ProductMakedNonOrderable!(string reason, UserId userId, DateTime utc)
            explicit "{id} maked non-orderable, reason - {reason} by {userId} on {utc}"

    UpdateProductStock?(decimal quantity, string reason)
        explicit "update {id} stock {qunatity}, reason - {reason}"
        ProductStockUpdated!(decimal quantity, string reason, UserId userId, DateTime utc)
            explicit "{id} stock updated {quantity}, reason - {reason} by {userId} on {utc}"

    RenameProduct?(string newTitle)
        explicit "rename {id}"
        ProductRenamed!(string newTitle, UserId userId, DateTime utc)
            explicit "{id} renamed by {userId} on {utc}"

     ChangeProductVatRate?(VatRate newVatRate)
        explicit "Change product vat rate - {newVatRate}"
        ProductVatRateChanged!(VatRate newVatRate, UserId userId, DateTime utc)
            explicit "{id} item changed on {newVatRate} by {userId} on {utc}"

    ChangeProductUnitOfMeasure?(string newUnitOfMeasure)
        explicit "Change product unit of measure - {newItemNo}"
        ProductUnitOfMeasureChanged!(string newUnitOfMeasure, UserId userId, DateTime utc)
            explicit "{id} item changed on {newUnitOfMeasure} by {userId} on {utc}"

    ChangeProductPrice?(CurrencyAmount newPrice)
        explicit "Change product price - {newPrice}"
        ProductPriceChanged!(CurrencyAmount newPrice, UserId userId, DateTime utc)
            explicit "{id} item changed on {newPrice} by {userId} on {utc}"

    DeleteProduct?()
        explicit "delete {id}"
        ProductDeleted!(UserId userId, DateTime utc)
            explicit "{id} deleted by {userId} on {utc}"
}

interface User(UserId id)
{
    // define shortcut for commands
    if ? = ICommand<UserId>
    // define shortcut for events
    if ! = IEvent<UserId>
        
    CreateUser?(string name, string login, string password, string role)
        explicit "Create {id} with name '{name}', login '{login}' and role '{role}'"
        UserCreated!(string name, string login, Password password, string role, DateTime utc)
            explicit "{id} created with name '{name}', login '{login}' and role '{role}', utc - {utc}"

    AssignRoleToUser?(string role)
        explicit "Assign role '{role}'  to '{id}'"
        RoleAssignedToUser!(string role, DateTime utc)
            explicit "Role '{role}' assigned to '{id}', utc - {utc}"

    ChangeUserPassword?(string oldPassword, string newPassword)
        explicit "Change password for '{id}'"
        UserPasswordChanged!(Password password, DateTime utc)
            explicit "Password for '{id}' changed, utc - {utc}"

    DeleteUser? ()
        UserDeleted! (DateTime utc)
            explicit "Deleted user {Id}, utc - {utc}"
}