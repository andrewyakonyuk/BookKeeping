using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace BookKeeping.Domain.Contracts
{
    #region Generated by Lokad Code DSL
    [DataContract(Namespace = "BookKeeping")]
public partial class CreateProduct : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string Title { get; private set; }
        [DataMember(Order = 3)] public string ItemNo { get; private set; }
        [DataMember(Order = 4)] public CurrencyAmount Price { get; private set; }
        [DataMember(Order = 5)] public decimal Stock { get; private set; }
        [DataMember(Order = 6)] public string UnitOfMeasure { get; private set; }
        [DataMember(Order = 7)] public VatRate VatRate { get; private set; }
        [DataMember(Order = 8)] public Barcode Barcode { get; private set; }
        
        CreateProduct () {}
        public CreateProduct (ProductId id, string title, string itemNo, CurrencyAmount price, decimal stock, string unitOfMeasure, VatRate vatRate, Barcode barcode)
        {
            Id = id;
            Title = title;
            ItemNo = itemNo;
            Price = price;
            Stock = stock;
            UnitOfMeasure = unitOfMeasure;
            VatRate = vatRate;
            Barcode = barcode;
        }
        
        public override string ToString()
        {
            return string.Format(@"Create product - {0}, {1}, {2}, {3}, {4}, {5}, {6}", Title, ItemNo, Price, Stock, UnitOfMeasure, VatRate, Barcode);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductCreated : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string Title { get; private set; }
        [DataMember(Order = 3)] public string ItemNo { get; private set; }
        [DataMember(Order = 4)] public CurrencyAmount Price { get; private set; }
        [DataMember(Order = 5)] public decimal Stock { get; private set; }
        [DataMember(Order = 6)] public string UnitOfMeasure { get; private set; }
        [DataMember(Order = 7)] public VatRate VatRate { get; private set; }
        [DataMember(Order = 8)] public Barcode Barcode { get; private set; }
        [DataMember(Order = 9)] public UserId UserId { get; private set; }
        [DataMember(Order = 10)] public DateTime Utc { get; private set; }
        
        ProductCreated () {}
        public ProductCreated (ProductId id, string title, string itemNo, CurrencyAmount price, decimal stock, string unitOfMeasure, VatRate vatRate, Barcode barcode, UserId userId, DateTime utc)
        {
            Id = id;
            Title = title;
            ItemNo = itemNo;
            Price = price;
            Stock = stock;
            UnitOfMeasure = unitOfMeasure;
            VatRate = vatRate;
            Barcode = barcode;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Product {1} created, {0}, {2}, {3}, {4}, {5}, {6} by {7} on {8}", Title, ItemNo, Price, Stock, UnitOfMeasure, VatRate, Barcode, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChangeProductBarcode : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public Barcode NewBarcode { get; private set; }
        
        ChangeProductBarcode () {}
        public ChangeProductBarcode (ProductId id, Barcode newBarcode)
        {
            Id = id;
            NewBarcode = newBarcode;
        }
        
        public override string ToString()
        {
            return string.Format(@"Change product barcode - {0}", NewBarcode);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductBarcodeChanged : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public Barcode NewBarcode { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductBarcodeChanged () {}
        public ProductBarcodeChanged (ProductId id, Barcode newBarcode, UserId userId, DateTime utc)
        {
            Id = id;
            NewBarcode = newBarcode;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Product barcode changed on {0} by {1} on {2}", NewBarcode, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChangeProductItemNo : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string NewItemNo { get; private set; }
        
        ChangeProductItemNo () {}
        public ChangeProductItemNo (ProductId id, string newItemNo)
        {
            Id = id;
            NewItemNo = newItemNo;
        }
        
        public override string ToString()
        {
            return string.Format(@"Change product item no. - {0}", NewItemNo);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductItemNoChanged : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string NewItemNo { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductItemNoChanged () {}
        public ProductItemNoChanged (ProductId id, string newItemNo, UserId userId, DateTime utc)
        {
            Id = id;
            NewItemNo = newItemNo;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} item changed on {1} by {2} on {3}", Id, NewItemNo, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class MakeProductOrderable : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        
        MakeProductOrderable () {}
        public MakeProductOrderable (ProductId id)
        {
            Id = id;
        }
        
        public override string ToString()
        {
            return string.Format(@"Make {0} orderable", Id);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductMakedOrderable : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        ProductMakedOrderable () {}
        public ProductMakedOrderable (ProductId id, UserId userId, DateTime utc)
        {
            Id = id;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} maked orderable by {1} on {2}", Id, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class MakeProductNonOrderable : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string Reason { get; private set; }
        
        MakeProductNonOrderable () {}
        public MakeProductNonOrderable (ProductId id, string reason)
        {
            Id = id;
            Reason = reason;
        }
        
        public override string ToString()
        {
            return string.Format(@"Make {0} non-orderable, reason - {1}", Id, Reason);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductMakedNonOrderable : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string Reason { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductMakedNonOrderable () {}
        public ProductMakedNonOrderable (ProductId id, string reason, UserId userId, DateTime utc)
        {
            Id = id;
            Reason = reason;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} maked non-orderable, reason - {1} by {2} on {3}", Id, Reason, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UpdateProductStock : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public decimal Quantity { get; private set; }
        [DataMember(Order = 3)] public string Reason { get; private set; }
        
        UpdateProductStock () {}
        public UpdateProductStock (ProductId id, decimal quantity, string reason)
        {
            Id = id;
            Quantity = quantity;
            Reason = reason;
        }
        
        public override string ToString()
        {
            return string.Format(@"update {0} stock {qunatity}, reason - {1}", Id, Reason);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductStockUpdated : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public decimal Quantity { get; private set; }
        [DataMember(Order = 3)] public string Reason { get; private set; }
        [DataMember(Order = 4)] public UserId UserId { get; private set; }
        [DataMember(Order = 5)] public DateTime Utc { get; private set; }
        
        ProductStockUpdated () {}
        public ProductStockUpdated (ProductId id, decimal quantity, string reason, UserId userId, DateTime utc)
        {
            Id = id;
            Quantity = quantity;
            Reason = reason;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} stock updated {1}, reason - {2} by {3} on {4}", Id, Quantity, Reason, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class RenameProduct : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string NewTitle { get; private set; }
        
        RenameProduct () {}
        public RenameProduct (ProductId id, string newTitle)
        {
            Id = id;
            NewTitle = newTitle;
        }
        
        public override string ToString()
        {
            return string.Format(@"rename {0}", Id);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductRenamed : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string NewTitle { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductRenamed () {}
        public ProductRenamed (ProductId id, string newTitle, UserId userId, DateTime utc)
        {
            Id = id;
            NewTitle = newTitle;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} renamed by {1} on {2}", Id, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChangeProductVatRate : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public VatRate NewVatRate { get; private set; }
        
        ChangeProductVatRate () {}
        public ChangeProductVatRate (ProductId id, VatRate newVatRate)
        {
            Id = id;
            NewVatRate = newVatRate;
        }
        
        public override string ToString()
        {
            return string.Format(@"Change product vat rate - {0}", NewVatRate);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductVatRateChanged : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public VatRate NewVatRate { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductVatRateChanged () {}
        public ProductVatRateChanged (ProductId id, VatRate newVatRate, UserId userId, DateTime utc)
        {
            Id = id;
            NewVatRate = newVatRate;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} item changed on {1} by {2} on {3}", Id, NewVatRate, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChangeProductUnitOfMeasure : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string NewUnitOfMeasure { get; private set; }
        
        ChangeProductUnitOfMeasure () {}
        public ChangeProductUnitOfMeasure (ProductId id, string newUnitOfMeasure)
        {
            Id = id;
            NewUnitOfMeasure = newUnitOfMeasure;
        }
        
        public override string ToString()
        {
            return string.Format(@"Change product unit of measure - {newItemNo}");
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductUnitOfMeasureChanged : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public string NewUnitOfMeasure { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductUnitOfMeasureChanged () {}
        public ProductUnitOfMeasureChanged (ProductId id, string newUnitOfMeasure, UserId userId, DateTime utc)
        {
            Id = id;
            NewUnitOfMeasure = newUnitOfMeasure;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} item changed on {1} by {2} on {3}", Id, NewUnitOfMeasure, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChangeProductPrice : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public CurrencyAmount NewPrice { get; private set; }
        
        ChangeProductPrice () {}
        public ChangeProductPrice (ProductId id, CurrencyAmount newPrice)
        {
            Id = id;
            NewPrice = newPrice;
        }
        
        public override string ToString()
        {
            return string.Format(@"Change product price - {0}", NewPrice);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductPriceChanged : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public CurrencyAmount NewPrice { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        ProductPriceChanged () {}
        public ProductPriceChanged (ProductId id, CurrencyAmount newPrice, UserId userId, DateTime utc)
        {
            Id = id;
            NewPrice = newPrice;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} item changed on {1} by {2} on {3}", Id, NewPrice, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class DeleteProduct : ICommand<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        
        DeleteProduct () {}
        public DeleteProduct (ProductId id)
        {
            Id = id;
        }
        
        public override string ToString()
        {
            return string.Format(@"delete {0}", Id);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ProductDeleted : IEvent<ProductId>
    {
        [DataMember(Order = 1)] public ProductId Id { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        ProductDeleted () {}
        public ProductDeleted (ProductId id, UserId userId, DateTime utc)
        {
            Id = id;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} deleted by {1} on {2}", Id, UserId, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CreateUser : ICommand<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public string Login { get; private set; }
        [DataMember(Order = 4)] public string Password { get; private set; }
        [DataMember(Order = 5)] public string Role { get; private set; }
        
        CreateUser () {}
        public CreateUser (UserId id, string name, string login, string password, string role)
        {
            Id = id;
            Name = name;
            Login = login;
            Password = password;
            Role = role;
        }
        
        public override string ToString()
        {
            return string.Format(@"Create {0} with name '{1}', login '{2}' and role '{3}'", Id, Name, Login, Role);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UserCreated : IEvent<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public string Login { get; private set; }
        [DataMember(Order = 4)] public Password Password { get; private set; }
        [DataMember(Order = 5)] public string Role { get; private set; }
        [DataMember(Order = 6)] public DateTime Utc { get; private set; }
        
        UserCreated () {}
        public UserCreated (UserId id, string name, string login, Password password, string role, DateTime utc)
        {
            Id = id;
            Name = name;
            Login = login;
            Password = password;
            Role = role;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} created with name '{1}', login '{2}' and role '{3}', utc - {4}", Id, Name, Login, Role, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class AssignRoleToUser : ICommand<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string Role { get; private set; }
        
        AssignRoleToUser () {}
        public AssignRoleToUser (UserId id, string role)
        {
            Id = id;
            Role = role;
        }
        
        public override string ToString()
        {
            return string.Format(@"Assign role '{1}'  to '{0}'", Id, Role);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class RoleAssignedToUser : IEvent<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string Role { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        RoleAssignedToUser () {}
        public RoleAssignedToUser (UserId id, string role, DateTime utc)
        {
            Id = id;
            Role = role;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Role '{1}' assigned to '{0}', utc - {2}", Id, Role, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChangeUserPassword : ICommand<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string OldPassword { get; private set; }
        [DataMember(Order = 3)] public string NewPassword { get; private set; }
        
        ChangeUserPassword () {}
        public ChangeUserPassword (UserId id, string oldPassword, string newPassword)
        {
            Id = id;
            OldPassword = oldPassword;
            NewPassword = newPassword;
        }
        
        public override string ToString()
        {
            return string.Format(@"Change password for '{0}'", Id);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UserPasswordChanged : IEvent<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public Password Password { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        UserPasswordChanged () {}
        public UserPasswordChanged (UserId id, Password password, DateTime utc)
        {
            Id = id;
            Password = password;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Password for '{0}' changed, utc - {1}", Id, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class RenameUser : ICommand<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string NewName { get; private set; }
        
        RenameUser () {}
        public RenameUser (UserId id, string newName)
        {
            Id = id;
            NewName = newName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Rename {0} on '{1}'", Id, NewName);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UserRenamed : IEvent<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public string NewName { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        UserRenamed () {}
        public UserRenamed (UserId id, string newName, DateTime utc)
        {
            Id = id;
            NewName = newName;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} renamed on '{1}'", Id, NewName);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class DeleteUser : ICommand<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        
        DeleteUser () {}
        public DeleteUser (UserId id)
        {
            Id = id;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UserDeleted : IEvent<UserId>
    {
        [DataMember(Order = 1)] public UserId Id { get; private set; }
        [DataMember(Order = 2)] public DateTime Utc { get; private set; }
        
        UserDeleted () {}
        public UserDeleted (UserId id, DateTime utc)
        {
            Id = id;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Deleted user {0}, utc - {1}", Id, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CreateCustomer : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public Currency Currency { get; private set; }
        
        CreateCustomer () {}
        public CreateCustomer (CustomerId id, string name, Currency currency)
        {
            Id = id;
            Name = name;
            Currency = currency;
        }
        
        public override string ToString()
        {
            return string.Format(@"Create {0} named '{1}' with currency {2}", Id, Name, Currency);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerCreated : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public Currency Currency { get; private set; }
        [DataMember(Order = 4)] public UserId UserId { get; private set; }
        [DataMember(Order = 5)] public DateTime Utc { get; private set; }
        
        CustomerCreated () {}
        public CustomerCreated (CustomerId id, string name, Currency currency, UserId userId, DateTime utc)
        {
            Id = id;
            Name = name;
            Currency = currency;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} created with name '{1}' and currency '{2}', utc - {3}", Id, Name, Currency, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class AddCustomerPayment : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Amount { get; private set; }
        
        AddCustomerPayment () {}
        public AddCustomerPayment (CustomerId id, string name, CurrencyAmount amount)
        {
            Id = id;
            Name = name;
            Amount = amount;
        }
        
        public override string ToString()
        {
            return string.Format(@"Add {0} - {1}", Name, Amount);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerPaymentAdded : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string PaymentName { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Payment { get; private set; }
        [DataMember(Order = 4)] public CurrencyAmount NewBalance { get; private set; }
        [DataMember(Order = 5)] public int Transaction { get; private set; }
        [DataMember(Order = 6)] public UserId UserId { get; private set; }
        [DataMember(Order = 7)] public DateTime Utc { get; private set; }
        
        CustomerPaymentAdded () {}
        public CustomerPaymentAdded (CustomerId id, string paymentName, CurrencyAmount payment, CurrencyAmount newBalance, int transaction, UserId userId, DateTime utc)
        {
            Id = id;
            PaymentName = paymentName;
            Payment = payment;
            NewBalance = newBalance;
            Transaction = transaction;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Added '{0}' {1} | Tx {3} => {2}", PaymentName, Payment, NewBalance, Transaction);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChargeCustomer : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Amount { get; private set; }
        
        ChargeCustomer () {}
        public ChargeCustomer (CustomerId id, string name, CurrencyAmount amount)
        {
            Id = id;
            Name = name;
            Amount = amount;
        }
        
        public override string ToString()
        {
            return string.Format(@"Charge {0} - '{1}'", Name, Amount);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerChargeAdded : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string ChargeName { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Charge { get; private set; }
        [DataMember(Order = 4)] public CurrencyAmount NewBalance { get; private set; }
        [DataMember(Order = 5)] public int Transaction { get; private set; }
        [DataMember(Order = 6)] public UserId UserId { get; private set; }
        [DataMember(Order = 7)] public DateTime Utc { get; private set; }
        
        CustomerChargeAdded () {}
        public CustomerChargeAdded (CustomerId id, string chargeName, CurrencyAmount charge, CurrencyAmount newBalance, int transaction, UserId userId, DateTime utc)
        {
            Id = id;
            ChargeName = chargeName;
            Charge = charge;
            NewBalance = newBalance;
            Transaction = transaction;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Charged '{0}' {1} | Tx {3} => {2}", ChargeName, Charge, NewBalance, Transaction);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class RenameCustomer : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string NewName { get; private set; }
        
        RenameCustomer () {}
        public RenameCustomer (CustomerId id, string newName)
        {
            Id = id;
            NewName = newName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Rename {0} to '{1}'", Id, NewName);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerRenamed : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public string OldName { get; private set; }
        [DataMember(Order = 4)] public UserId UserId { get; private set; }
        [DataMember(Order = 5)] public DateTime Utc { get; private set; }
        
        CustomerRenamed () {}
        public CustomerRenamed (CustomerId id, string name, string oldName, UserId userId, DateTime utc)
        {
            Id = id;
            Name = name;
            OldName = oldName;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Customer renamed from '{1}' to '{0}'", Name, OldName);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class LockCustomer : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Reason { get; private set; }
        
        LockCustomer () {}
        public LockCustomer (CustomerId id, string reason)
        {
            Id = id;
            Reason = reason;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerLocked : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Reason { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        CustomerLocked () {}
        public CustomerLocked (CustomerId id, string reason, UserId userId, DateTime utc)
        {
            Id = id;
            Reason = reason;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} locked: {1}", Id, Reason);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class LockCustomerForAccountOverdraft : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string Comment { get; private set; }
        
        LockCustomerForAccountOverdraft () {}
        public LockCustomerForAccountOverdraft (CustomerId id, string comment)
        {
            Id = id;
            Comment = comment;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class DeleteCustomer : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        
        DeleteCustomer () {}
        public DeleteCustomer (CustomerId id)
        {
            Id = id;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerDeleted : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        CustomerDeleted () {}
        public CustomerDeleted (CustomerId id, UserId userId, DateTime utc)
        {
            Id = id;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Deleted {0}, utc - {1}", Id, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UpdateCustomerAddress : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public Address Address { get; private set; }
        
        UpdateCustomerAddress () {}
        public UpdateCustomerAddress (CustomerId id, Address address)
        {
            Id = id;
            Address = address;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerAddressUpdated : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public Address Address { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        CustomerAddressUpdated () {}
        public CustomerAddressUpdated (CustomerId id, Address address, UserId userId, DateTime utc)
        {
            Id = id;
            Address = address;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Legal address for {0} updated on {1}", Id, Address);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UpdateCustomerInfo : ICommand<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string BankingDetails { get; private set; }
        [DataMember(Order = 3)] public string Phone { get; private set; }
        [DataMember(Order = 4)] public string Fax { get; private set; }
        [DataMember(Order = 5)] public string Email { get; private set; }
        
        UpdateCustomerInfo () {}
        public UpdateCustomerInfo (CustomerId id, string bankingDetails, string phone, string fax, string email)
        {
            Id = id;
            BankingDetails = bankingDetails;
            Phone = phone;
            Fax = fax;
            Email = email;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CustomerInfoUpdated : IEvent<CustomerId>
    {
        [DataMember(Order = 1)] public CustomerId Id { get; private set; }
        [DataMember(Order = 2)] public string BankingDetails { get; private set; }
        [DataMember(Order = 3)] public string Phone { get; private set; }
        [DataMember(Order = 4)] public string Fax { get; private set; }
        [DataMember(Order = 5)] public string Email { get; private set; }
        [DataMember(Order = 6)] public UserId UserId { get; private set; }
        [DataMember(Order = 7)] public DateTime Utc { get; private set; }
        
        CustomerInfoUpdated () {}
        public CustomerInfoUpdated (CustomerId id, string bankingDetails, string phone, string fax, string email, UserId userId, DateTime utc)
        {
            Id = id;
            BankingDetails = bankingDetails;
            Phone = phone;
            Fax = fax;
            Email = email;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} info updated: banking details '{1}, phone '{2}', fax '{3}', email '{4}', by {5}", Id, BankingDetails, Phone, Fax, Email, UserId);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class CreateVendor : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public Currency Currency { get; private set; }
        
        CreateVendor () {}
        public CreateVendor (VendorId id, string name, Currency currency)
        {
            Id = id;
            Name = name;
            Currency = currency;
        }
        
        public override string ToString()
        {
            return string.Format(@"Create {0} named '{1}' with currency {2}", Id, Name, Currency);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorCreated : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public Currency Currency { get; private set; }
        [DataMember(Order = 4)] public UserId UserId { get; private set; }
        [DataMember(Order = 5)] public DateTime Utc { get; private set; }
        
        VendorCreated () {}
        public VendorCreated (VendorId id, string name, Currency currency, UserId userId, DateTime utc)
        {
            Id = id;
            Name = name;
            Currency = currency;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} created with name '{1}' and currency '{2}', utc - {3}", Id, Name, Currency, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class AddVendorPayment : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Amount { get; private set; }
        
        AddVendorPayment () {}
        public AddVendorPayment (VendorId id, string name, CurrencyAmount amount)
        {
            Id = id;
            Name = name;
            Amount = amount;
        }
        
        public override string ToString()
        {
            return string.Format(@"Add {0} - {1}", Name, Amount);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorPaymentAdded : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string PaymentName { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Payment { get; private set; }
        [DataMember(Order = 4)] public CurrencyAmount NewBalance { get; private set; }
        [DataMember(Order = 5)] public int Transaction { get; private set; }
        [DataMember(Order = 6)] public UserId UserId { get; private set; }
        [DataMember(Order = 7)] public DateTime Utc { get; private set; }
        
        VendorPaymentAdded () {}
        public VendorPaymentAdded (VendorId id, string paymentName, CurrencyAmount payment, CurrencyAmount newBalance, int transaction, UserId userId, DateTime utc)
        {
            Id = id;
            PaymentName = paymentName;
            Payment = payment;
            NewBalance = newBalance;
            Transaction = transaction;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Added '{0}' {1} | Tx {3} => {2}", PaymentName, Payment, NewBalance, Transaction);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class ChargeVendor : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Amount { get; private set; }
        
        ChargeVendor () {}
        public ChargeVendor (VendorId id, string name, CurrencyAmount amount)
        {
            Id = id;
            Name = name;
            Amount = amount;
        }
        
        public override string ToString()
        {
            return string.Format(@"Charge {0} - '{1}'", Name, Amount);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorChargeAdded : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string ChargeName { get; private set; }
        [DataMember(Order = 3)] public CurrencyAmount Charge { get; private set; }
        [DataMember(Order = 4)] public CurrencyAmount NewBalance { get; private set; }
        [DataMember(Order = 5)] public int Transaction { get; private set; }
        [DataMember(Order = 6)] public UserId UserId { get; private set; }
        [DataMember(Order = 7)] public DateTime Utc { get; private set; }
        
        VendorChargeAdded () {}
        public VendorChargeAdded (VendorId id, string chargeName, CurrencyAmount charge, CurrencyAmount newBalance, int transaction, UserId userId, DateTime utc)
        {
            Id = id;
            ChargeName = chargeName;
            Charge = charge;
            NewBalance = newBalance;
            Transaction = transaction;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Charged '{0}' {1} | Tx {3} => {2}", ChargeName, Charge, NewBalance, Transaction);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class RenameVendor : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string NewName { get; private set; }
        
        RenameVendor () {}
        public RenameVendor (VendorId id, string newName)
        {
            Id = id;
            NewName = newName;
        }
        
        public override string ToString()
        {
            return string.Format(@"Rename {0} to '{1}'", Id, NewName);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorRenamed : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Name { get; private set; }
        [DataMember(Order = 3)] public string OldName { get; private set; }
        [DataMember(Order = 4)] public UserId UserId { get; private set; }
        [DataMember(Order = 5)] public DateTime Utc { get; private set; }
        
        VendorRenamed () {}
        public VendorRenamed (VendorId id, string name, string oldName, UserId userId, DateTime utc)
        {
            Id = id;
            Name = name;
            OldName = oldName;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Vendor renamed from '{1}' to '{0}'", Name, OldName);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class LockVendor : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Reason { get; private set; }
        
        LockVendor () {}
        public LockVendor (VendorId id, string reason)
        {
            Id = id;
            Reason = reason;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorLocked : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Reason { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        VendorLocked () {}
        public VendorLocked (VendorId id, string reason, UserId userId, DateTime utc)
        {
            Id = id;
            Reason = reason;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} locked: {1}", Id, Reason);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class LockVendorForAccountOverdraft : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string Comment { get; private set; }
        
        LockVendorForAccountOverdraft () {}
        public LockVendorForAccountOverdraft (VendorId id, string comment)
        {
            Id = id;
            Comment = comment;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class DeleteVendor : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        
        DeleteVendor () {}
        public DeleteVendor (VendorId id)
        {
            Id = id;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorDeleted : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public UserId UserId { get; private set; }
        [DataMember(Order = 3)] public DateTime Utc { get; private set; }
        
        VendorDeleted () {}
        public VendorDeleted (VendorId id, UserId userId, DateTime utc)
        {
            Id = id;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Deleted {0}, utc - {1}", Id, Utc);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UpdateVendorAddress : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public Address Address { get; private set; }
        
        UpdateVendorAddress () {}
        public UpdateVendorAddress (VendorId id, Address address)
        {
            Id = id;
            Address = address;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorAddressUpdated : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public Address Address { get; private set; }
        [DataMember(Order = 3)] public UserId UserId { get; private set; }
        [DataMember(Order = 4)] public DateTime Utc { get; private set; }
        
        VendorAddressUpdated () {}
        public VendorAddressUpdated (VendorId id, Address address, UserId userId, DateTime utc)
        {
            Id = id;
            Address = address;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"Legal address for {0} updated on {1}", Id, Address);
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class UpdateVendorInfo : ICommand<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string BankingDetails { get; private set; }
        [DataMember(Order = 3)] public string Phone { get; private set; }
        [DataMember(Order = 4)] public string Fax { get; private set; }
        [DataMember(Order = 5)] public string Email { get; private set; }
        
        UpdateVendorInfo () {}
        public UpdateVendorInfo (VendorId id, string bankingDetails, string phone, string fax, string email)
        {
            Id = id;
            BankingDetails = bankingDetails;
            Phone = phone;
            Fax = fax;
            Email = email;
        }
    }
    [DataContract(Namespace = "BookKeeping")]
public partial class VendorInfoUpdated : IEvent<VendorId>
    {
        [DataMember(Order = 1)] public VendorId Id { get; private set; }
        [DataMember(Order = 2)] public string BankingDetails { get; private set; }
        [DataMember(Order = 3)] public string Phone { get; private set; }
        [DataMember(Order = 4)] public string Fax { get; private set; }
        [DataMember(Order = 5)] public string Email { get; private set; }
        [DataMember(Order = 6)] public UserId UserId { get; private set; }
        [DataMember(Order = 7)] public DateTime Utc { get; private set; }
        
        VendorInfoUpdated () {}
        public VendorInfoUpdated (VendorId id, string bankingDetails, string phone, string fax, string email, UserId userId, DateTime utc)
        {
            Id = id;
            BankingDetails = bankingDetails;
            Phone = phone;
            Fax = fax;
            Email = email;
            UserId = userId;
            Utc = utc;
        }
        
        public override string ToString()
        {
            return string.Format(@"{0} info updated: banking details '{1}, phone '{2}', fax '{3}', email '{4}', by {5}", Id, BankingDetails, Phone, Fax, Email, UserId);
        }
    }
    
    public interface IVendorApplicationService
    {
        void When(CreateVendor c);
        void When(AddVendorPayment c);
        void When(ChargeVendor c);
        void When(RenameVendor c);
        void When(LockVendor c);
        void When(LockVendorForAccountOverdraft c);
        void When(DeleteVendor c);
        void When(UpdateVendorAddress c);
        void When(UpdateVendorInfo c);
    }
    
    public interface IVendorState
    {
        void When(VendorCreated e);
        void When(VendorPaymentAdded e);
        void When(VendorChargeAdded e);
        void When(VendorRenamed e);
        void When(VendorLocked e);
        void When(VendorDeleted e);
        void When(VendorAddressUpdated e);
        void When(VendorInfoUpdated e);
    }
    
    public interface ICustomerApplicationService
    {
        void When(CreateCustomer c);
        void When(AddCustomerPayment c);
        void When(ChargeCustomer c);
        void When(RenameCustomer c);
        void When(LockCustomer c);
        void When(LockCustomerForAccountOverdraft c);
        void When(DeleteCustomer c);
        void When(UpdateCustomerAddress c);
        void When(UpdateCustomerInfo c);
    }
    
    public interface ICustomerState
    {
        void When(CustomerCreated e);
        void When(CustomerPaymentAdded e);
        void When(CustomerChargeAdded e);
        void When(CustomerRenamed e);
        void When(CustomerLocked e);
        void When(CustomerDeleted e);
        void When(CustomerAddressUpdated e);
        void When(CustomerInfoUpdated e);
    }
    
    public interface IUserApplicationService
    {
        void When(CreateUser c);
        void When(AssignRoleToUser c);
        void When(ChangeUserPassword c);
        void When(RenameUser c);
        void When(DeleteUser c);
    }
    
    public interface IUserState
    {
        void When(UserCreated e);
        void When(RoleAssignedToUser e);
        void When(UserPasswordChanged e);
        void When(UserRenamed e);
        void When(UserDeleted e);
    }
    
    public interface IProductApplicationService
    {
        void When(CreateProduct c);
        void When(ChangeProductBarcode c);
        void When(ChangeProductItemNo c);
        void When(MakeProductOrderable c);
        void When(MakeProductNonOrderable c);
        void When(UpdateProductStock c);
        void When(RenameProduct c);
        void When(ChangeProductVatRate c);
        void When(ChangeProductUnitOfMeasure c);
        void When(ChangeProductPrice c);
        void When(DeleteProduct c);
    }
    
    public interface IProductState
    {
        void When(ProductCreated e);
        void When(ProductBarcodeChanged e);
        void When(ProductItemNoChanged e);
        void When(ProductMakedOrderable e);
        void When(ProductMakedNonOrderable e);
        void When(ProductStockUpdated e);
        void When(ProductRenamed e);
        void When(ProductVatRateChanged e);
        void When(ProductUnitOfMeasureChanged e);
        void When(ProductPriceChanged e);
        void When(ProductDeleted e);
    }
    #endregion
}
